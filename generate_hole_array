#!/usr/bin/perl -w

########################################
##
## generate_hole_array
##
## part of the g-code-generator scripts collection
##
## generates an array of bored holes (or a single hole)
##
## Tim Foreman - twforeman@gmail.com
##
## The most recent version is always available at:
## https://github.com/twforeman/g-code-generators
##
## TODO
##
## * Add finish path logic
## * Rework program to pass variables around instead of the current mix of passing and globals
## * Move step-over logic into generateCircle code ??
## * Rework user input to display values and let the user change them before generating g code
## * add logic to not cut air in the counterbore area when boring the holes
## * add ability generate and/or save the user config file
##
## version 0.3.0 -
##  *  added spiral cut ability
##  *  changed milling method to go to full depth at each stepover value instead of doing
##     full diameter for each plunge depth - makes more sense for the spiral method
##  *  cleaned up code a little
##
## version 0.2.1 -
##  *  fixed issues with errors when no filename is entered
##
## version 0.2.0 -
##  *  added couterbore option
##
## version 0.1.0 -
##  *  Inital release
##
########################################

use strict;
use POSIX "fmod";

my $configFile = "generate_hole_array.conf";

my %userPrefs;
my %inputValues;

sub readConfig() {

    ( -f $configFile ) || die "Config file: $configFile not found.\n";

    open CONFIG, $configFile;

    while (<CONFIG>) {
        chomp;       # no newline
        s/#.*//;     # no comments
        s/^\s+//;    # no leading white
        s/\s+$//;    # no trailing white
        next unless length;    # anything left?
        my ( $var, $value ) = split( /\s*=\s*/, $_, 2 );
        $userPrefs{$var} = $value;
    }
}

sub getUserInput() {

    $inputValues{'units'} = "";

    while (( $inputValues{'units'} ne "i" )
        && ( $inputValues{'units'} ne "m" ) )
    {
        $inputValues{'units'} = lc(
            promptUser(
                "Units - (i)nches (m)illimeters ",
                ( $userPrefs{'units'} eq 'inches' ? "i" : "m" )
            )
        );
    }

    $inputValues{'end_mill_dia'} =
      promptUser( "End mill diameter ", $userPrefs{'end_mill_dia'} );
    $inputValues{'mill_dir'} =
      promptUser( "Circle direction (ccw/cw) ", $userPrefs{'mill_dir'} );
    $inputValues{'pass_overlap'} =
      promptUser( "Step over percentage ", $userPrefs{'pass_overlap'} );
    $inputValues{'safety_plane'} =
      promptUser( "Safety plane height ", $userPrefs{'safety_plane'} );
    $inputValues{'feed_rate'} =
      promptUser( "Feed rate ", $userPrefs{'feed_rate'} );
    print "\n";
    $inputValues{'hole_dia'} =
      promptUser( "Hole diameter ", $userPrefs{'hole_diameter'} );
    $inputValues{'hole_depth'} =
      promptUser( "Hole depth ", $userPrefs{'hole_depth'} );

    $inputValues{'cut_method'} =
      lc( promptUser( "Plunge or Spiral cut (p/s) ", $userPrefs{'cut_method'} ) );

    if ( $inputValues{'cut_method'} eq "p" ) {
        $inputValues{'plunge_depth'} =
          promptUser( "Plunge depth per pass", $userPrefs{'plunge_depth'} );
    } else {
        $inputValues{'plunge_depth'} =
          promptUser( "Cut depth per pass", $userPrefs{'plunge_depth'} );
    }
    $inputValues{'plunge_rate'} =
      promptUser( "Plunge rate ", $userPrefs{'plunge_rate'} );

    $inputValues{'cbore'} = lc( promptUser( "Counterbore (y/n)", "N" ) );

    if ( $inputValues{'cbore'} eq "y" ) {
        $inputValues{'cbore_dia'}   = promptUser("Counterbore diameter ");
        $inputValues{'cbore_depth'} = promptUser("Counterbore depth ");
    }
    print "\n";
    $inputValues{'x_origin'} =
      promptUser( "X origin ", $userPrefs{'x_origin'} );
    $inputValues{'y_origin'} =
      promptUser( "Y origin ", $userPrefs{'y_origin'} );
    $inputValues{'z_origin'} =
      promptUser( "Z origin ", $userPrefs{'z_origin'} );
    $inputValues{'x_count'} =
      promptUser( "Number of columns (X axis) ", $userPrefs{'x_count'} );
    $inputValues{'y_count'} =
      promptUser( "Number of rows (Y axis) ", $userPrefs{'y_count'} );
    if ( $inputValues{'x_count'} > 1 ) {
        $inputValues{'x_spacing'} =
          promptUser( "X spacing ", $userPrefs{'x_spacing'} );
    } else {
        $inputValues{'x_spacing'} = 1;
    }
    if ( $inputValues{'y_count'} > 1 ) {
        $inputValues{'y_spacing'} =
          promptUser( "Y spacing ", $userPrefs{'y_spacing'} );
    } else {
        $inputValues{'y_spacing'} = 1;
    }
    print "\n";
    $inputValues{'comment'} = promptUser("Comment ");
    $inputValues{'filename'} =
      promptUser("Output file name (leave blank for stdout)");
}

sub sanityCheck() {

    ## Lets make sure some of these values make sense
    ( $inputValues{'hole_dia'} <= $inputValues{'end_mill_dia'} )
      && die "Your specified end mill is larger than the hole diameter\n";

    if ( defined( $inputValues{'filename'} ) ) {
        my $overwrite = "n";
        while ( ( -f $inputValues{'filename'} ) && ( $overwrite eq 'n' ) ) {
            $overwrite = lc(
                promptUser(
"Output file $inputValues{'filename'} already exists, would you like to overwrite it? ",
                    "N"
                )
            );
            if ( $overwrite eq 'n' ) {
                $inputValues{'filename'} =
                  promptUser("Please enter a new output file name ");
            }
        }

        open TEST, $inputValues{'filename'}
          || die "Unable to open output file: $inputValues{'filename'}, $?\n";
        close TEST;
    }
    ### TODO - add more tests
}

sub calculateGcode() {

    if ( defined( $inputValues{'filename'} ) ) {
        open( OUTFILE, ">$inputValues{'filename'}" )
          || die "Unable to open output file: $inputValues{'filename'}, $?\n";
    } else {
        open( OUTFILE, ">-" );
    }

    my $currentX = $inputValues{'x_origin'};
    my $currentY = $inputValues{'y_origin'};
    my $currentZ = $inputValues{'z_origin'};

    # output some header stuff
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
      localtime(time);

    print OUTFILE "%\n";

    printf OUTFILE
      "( Created with generate_array - %4d-%02d-%02d %02d:%02d:%02d )\n",
      $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    defined( $inputValues{'comment'} )
      && print OUTFILE "( $inputValues{'comment'} )\n";

    printf OUTFILE "( Bores %.4f dia holes with %.4f dia end mill )\n",
      $inputValues{'hole_dia'}, $inputValues{'end_mill_dia'};
    if ( $inputValues{'cbore'} eq "y" ) {
        printf OUTFILE "( Counterbore %.4f diameter x %.4f deep )\n",
          $inputValues{'cbore_dia'}, $inputValues{'cbore_depth'};
    }

    if ( $inputValues{'units'} eq 'i' ) {
        print OUTFILE "G20 ";
    } else {
        print OUTFILE "G21 ";
    }

    print OUTFILE "G90 G40 G17\n";
    #printf OUTFILE "G0 X%.4f Y%.4f\n", $inputValues{'x_origin'},
    #  $inputValues{'y_origin'};
    #printf OUTFILE "G0 Z%.4f\n", $inputValues{'safety_plane'};

    my $column    = 1;
    my $row       = 1;
    my $direction = 1;

    # do some cutter step over math here
    my $stepOver =
      ( $inputValues{'pass_overlap'} / 100 ) * $inputValues{'end_mill_dia'};
    my $cutterRadius = $inputValues{'end_mill_dia'} / 2;

    ## TODO add finish path here

    while ( $column <= $inputValues{'x_count'} ) {
        while ( $row <= $inputValues{'y_count'} ) {

            # make the counterbore (if there is one)
            if ( $inputValues{'cbore'} eq "y" ) {

                my $holeRadius       = $inputValues{'cbore_dia'} / 2;
                my $cutterPathRadius = $holeRadius - $cutterRadius;

                if ( $cutterPathRadius <= $stepOver ) {

                    # single pass will clean it up
                    generateHole( $currentX, $currentY, $cutterPathRadius,
                        $inputValues{'cbore_depth'}, \*OUTFILE );

                } else {

                    # need to do multiple passes for stepover
                    my $numStepOver   = int( $cutterPathRadius / $stepOver );
                    my $tempRadius    = 0;
                    my $stepOverCount = 1;

                    while ( $stepOverCount <= $numStepOver ) {

                        $tempRadius = $tempRadius + $stepOver;

                        generateHole( $currentX, $currentY, $tempRadius,
                            $inputValues{'cbore_depth'}, \*OUTFILE );
                        $stepOverCount++;
                    }

                    if ( $tempRadius < $cutterPathRadius ) {

                        # needs a finish path
                        generateHole( $currentX, $currentY, $cutterPathRadius,
                            $inputValues{'cbore_depth'}, \*OUTFILE );

                    }

                }
            }

            # make the hole
            my $holeRadius       = $inputValues{'hole_dia'} / 2;
            my $cutterPathRadius = $holeRadius - $cutterRadius;

            if ( $cutterPathRadius <= $stepOver ) {

                # single pass will clean it up
                generateHole( $currentX, $currentY, $cutterPathRadius,
                    $inputValues{'hole_depth'}, \*OUTFILE );

            } else {

                # need to do multiple passes for stepover
                my $numStepOver   = int( $cutterPathRadius / $stepOver );
                my $tempRadius    = 0;
                my $stepOverCount = 1;

                while ( $stepOverCount <= $numStepOver ) {

                    $tempRadius = $tempRadius + $stepOver;
                    generateHole( $currentX, $currentY, $tempRadius,
                        $inputValues{'hole_depth'}, \*OUTFILE );
                    $stepOverCount++;
                }

                if ( $tempRadius < $cutterPathRadius ) {

                    # needs a finish path
                    generateHole( $currentX, $currentY, $cutterPathRadius,
                        $inputValues{'hole_depth'}, \*OUTFILE );
                }

            }

            if ( $direction == 1 ) {
                $currentY = $currentY + $inputValues{'y_spacing'};
            } else {
                $currentY = $currentY - $inputValues{'y_spacing'};
            }

            $row++;
        }
        $currentX = $currentX + $inputValues{'x_spacing'};
        $column++;
        $row = 1;
        if ( $direction == 1 ) {
            $currentY  = $currentY - $inputValues{'y_spacing'};
            $direction = 0;
        } else {
            $currentY  = $inputValues{'y_origin'};
            $direction = 1;
        }
    }

    close OUTFILE;
}

sub promptUser {

    my ( $prompt, $default ) = @_;
    my $defaultValue = defined($default) ? "[$default]" : "";
    print "$prompt $defaultValue: ";
    chomp( my $input = <STDIN> );
    return $input ? $input : $default;
}

sub generateHole {
    my ( $xOrigin, $yOrigin, $holeRadius, $holeDepth, $FILE ) = @_;

    #my $cutterPathRadius = $holeRadius - ( $inputValues{'end_mill_dia'} / 2 );

    my $targetZ = $inputValues{'z_origin'};
    my $finalZ  = $targetZ - $holeDepth;
    my $startZ;

    my $plungeDepth =  $inputValues{'plunge_depth'};

    if ( $plungeDepth > $holeDepth ) {
	$plungeDepth = $holeDepth
    }

    my $finalPlunge = fmod( $holeDepth, $plungeDepth );
    my $numPlunge = int( $holeDepth / $plungeDepth );

    my $plungeCount = 1;

    # move to the start point and drop to Z origin
    printf $FILE "G0 X%.4f Y%.4f\n",
      $xOrigin, $yOrigin;

    printf $FILE "G01 F%.2f Z%.4f\n",
      $inputValues{'plunge_rate'},
      $inputValues{'z_origin'};

    while ( $plungeCount <= $numPlunge ) {

        $startZ = $targetZ;

        $targetZ = $inputValues{'z_origin'} -
          ( $plungeDepth * $plungeCount );

        print $FILE generateCircle(
            $xOrigin, $yOrigin,
            $startZ, $targetZ, $holeRadius
        );

        $plungeCount++;
    }

    if ( $finalPlunge > 0 ) {

        # make one more pass to the final depth
	$startZ = $targetZ;
        $targetZ = $inputValues{'z_origin'} - $inputValues{'hole_depth'};

        print $FILE generateCircle(
            $xOrigin, $yOrigin,
            $startZ, $targetZ, $holeRadius
        ); }

    if ( $inputValues{'cut_method'} eq 's' ) {

        # we need a finish path to flatten the bottom
        $targetZ = $inputValues{'z_origin'} - $inputValues{'hole_depth'};

        print $FILE generateCircle(
            $xOrigin, $yOrigin,
            $targetZ, $targetZ, $holeRadius
        );
    }

    # move back to the center of the hole
    printf $FILE "G01 X%.4f Y%.4f\n", $xOrigin, $yOrigin;

    # rapid back to the safety plane
    printf $FILE "G00 Z%.4f\n", $inputValues{'safety_plane'};

}

sub generateCircle {

    ## It is recommended to generate circles using multiple arcs
    ## so we will do four 90 degree arcs

    my ( $xOrigin, $yOrigin, $startZ, $endZ, $radius ) = @_;

    my $stepZ = 0;

    if ( $startZ != $endZ ) {
        $stepZ = ( ( $startZ - $endZ ) / 4 );
    }

    my $targetZ = $startZ - $stepZ;

    my $gcode = "";

    if ( $inputValues{'cut_method'} eq 'p' ) {

        # plunge to end depth
        $gcode = $gcode . sprintf "G01 F%.2f Z%.4f\n",
          $inputValues{'plunge_rate'},
          $endZ;
        $targetZ = $endZ;
        $stepZ = 0;
    }

    # move to the start point of the hole
    $gcode = $gcode . sprintf "G01 F%.2f X%.4f\n", $inputValues{'feed_rate'},
      ( $xOrigin + $radius );

    # the last quadrant uses the endZ variable instead of the calculated
    # targetZ to avoid any rounding issues with the final depth

    if ( $inputValues{'mill_dir'} eq 'ccw' ) {
        $gcode = $gcode . sprintf "G03 X%.4f Y%.4f Z%.4f I%.4f J%.4f\n",
          $xOrigin,
          ( $yOrigin + $radius ), $targetZ, ( -$radius ), 0;
        $targetZ = $targetZ - $stepZ;
        $gcode   = $gcode . sprintf "G03 X%.4f Y%.4f Z%.4f I%.4f J%.4f\n",
          ( $xOrigin - $radius ), $yOrigin, $targetZ, 0, ( -$radius );
        $targetZ = $targetZ - $stepZ;
        $gcode   = $gcode . sprintf "G03 X%.4f Y%.4f Z%.4f I%.4f J%.4f\n",
          $xOrigin,
          ( $yOrigin - $radius ), $targetZ, $radius, 0;
        $gcode = $gcode . sprintf "G03 X%.4f Y%.4f Z%.4f I%.4f J%.4f\n",
          ( $xOrigin + $radius ), $yOrigin, $endZ, 0, $radius;
    } else {
        $gcode = $gcode . sprintf "G02 X%.4f Y%.4f Z%.4f I%.4f J%.4f\n",
          $xOrigin,
          ( $yOrigin - $radius ), $targetZ, ( -$radius ), 0;
        $targetZ = $targetZ - $stepZ;
        $gcode   = $gcode . sprintf "G02 X%.4f Y%.4f Z%.4f I%.4f J%.4f\n",
          ( $xOrigin - $radius ), $yOrigin, $targetZ, 0, $radius;
        $targetZ = $targetZ - $stepZ;
        $gcode   = $gcode . sprintf "G02 X%.4f Y%.4f Z%.4f I%.4f J%.4f\n",
          $xOrigin,
          ( $yOrigin + $radius ), $targetZ, $radius, 0;
        $gcode = $gcode . sprintf "G02 X%.4f Y%.4f Z%.4f I%.4f J%.4f\n",
          ( $xOrigin + $radius ), $yOrigin, $endZ, 0, ( -$radius );
    }

    if ( $inputValues{'cut_method'} eq 'p' ) {
        # move back to the center of the hole for the next plunge
        $gcode = $gcode . sprintf "G01 X%.4f Y%.4f\n", $xOrigin, $yOrigin;
    }

    return $gcode;

}

readConfig();
getUserInput();
sanityCheck();
calculateGcode();
